---
title: "Component Pattern"
layout: post
date: 2019-05-20 14:08
image: /assets/images/markdown.jpg
headerImage: false
tag:
- Design Pattern
- Component Pattern
- Unity
category: blog
author: heetaekim
description: Component Pattern의 소개와 사용법 및 실례
---

# Component Pattern
---
Component Pattern은 한 개체가 여러 분야를 서로 커플링없이 다룰 수 있게 하는 패턴이다. 시스템 하나를 통 째로 일체형으로 구축하지 않고 기능이나 요소들을 쪼개서 Component로 부품화하여 만든 후 조립하여 사용하는 방식이다. 그리고 개체는 컴포넌트들의 컨테이너 역할만 하는 껍데기가 된다. 예를 들자면 컴퓨터를 조립할 때 케이스, 메인보드, cpu, 메모리 등등 여러 부품을 조립해서 만들 수 있을 것이다. 그리고 각 부품은 다른 부품으로 교체 할 수 있고 원하면 추가할 수 도 있고 포트를 활용해 다른 기능을 하는 기기를 연결할 수 도 있다. 이러한 개념을 인지하고 이번 포스팅을 읽어보자

&nbsp;&nbsp;&nbsp;&nbsp;


# 사용하기 적절한 때?
---

### 문제점
컴퓨터을 만들 때 컴퓨터는 여러가지 일을 할 것이다. 이를 코드로 간단히 구현해보도록 하자! 컴퓨터는 출력장치, cpu, 메모리, 입력장치 등 여러가지 기능을 하는 부품들을 모아서 만들 수 있을 것이다. 하지만 이 모든 기능을 한 객체에 전부 담게 되면 코드가 길어지게 되고 각 기능들이 서로 커플링되게 될 것이다.

 그리고 컴퓨터는 PC, 노트북, 태블릿, 스마트폰 등 여러가지 모델이 있을 것이고 이를 상속으로 해결하려한다면 설계가 어려울 뿐더러 단일 상속으로는 다른 클래스에서 중복되는 기능이 생길 수 있고 다중 상속을 한다면 다이아몬드 구조가 생길 것이다.

&nbsp;&nbsp;&nbsp;&nbsp;

### 해결법
이를 해결하기 위해 상속으로 해결하기 보다 각 기능을 부품화하여 나누면 기능 별로 코드를 나눌 수 있기 때문에 한 개체에 들어가는 코드량도 적어지고 각 기능들을 디커플링 할 수 있다. 또 기능만을 따로 분리했기 때문에 다른 개체에서 사용할 수 도 있어 재사용성이 높아진다.

&nbsp;&nbsp;&nbsp;&nbsp;


# 코드로 보는 예시
---
먼저 위 예시를 개체 하나에 다 담은 코드이다.

##### Computer.cpp


이 코드는 모든 기능을 포함하고 있는 통짜 클래스이다. 코드의 길이가 길고 각 기능이 번잡하게 엮여있다. 이 코드를 각 기능별로 분할해보겠다

##### Computer.cpp

##### CPU.cpp

##### Memory.cpp

##### Monitor.cpp

##### Keyboard.cpp


다음과 같이 분리한다면 코드량이 적어지고 서로 커플링되던 코드를 디커플링할 수 있다. 이 블로그에서는 이 정도 수준의 분리를 하고 구조화를 했지만 Component 인터페이스를 만들어서 더 구조화 할 수도 있고 이를 활용해 Factory를 구축해 가독성과 성능을 향상시킬 수 도 있다.

&nbsp;&nbsp;&nbsp;&nbsp;


# 주의사항
---
Component의 기능을 제대로 분류하지 않는다면 오히려 더 복잡해질 가능성이 있다. 또 컴포넌트 간 통신이 어렵기 때문에 어떤 문제를 해결하기 위해서는 더 많은 단계를 거쳐야 할 가능성이 있다. 즉, 오버엔지니어링의 우려가 있다.

&nbsp;&nbsp;&nbsp;&nbsp;


# 개체와 Component간의 통신 문제점
---
사실 모듈을 디커플링하게 되면 따라오는 것이 바로 모듈간의 통신이다. 이 문제점으로 인해 위에서 언급한 오버엔지니어링이 발생할 수도 있다. 개체나 각 Component들은 서로 필요한 정보를 어떻게 얻어오고 서로를 참조할 수 있을까?

### 객체의 Component 참조
1. 객체가 필요한 컴포넌트를 스스로 생성

예시코드 작성

2. 외부에서 컴포넌트 전달

예시코드 작성

### Component끼리의 참조
1. 객체의 상태를 변경

예시코드 작성

2. Component들이 서로 직접 참조

예시코드 작성


3. 메시징

예시코드 작성


# 실제 예시
---
### Game Engine Unity
Unity는 Component Pattern을 잘 반영했다. GameObject라는 객체에 Component들을 붙여서 사용할 수 있도록 설계되어있다. 따라서 디커플링을 아주 잘 할 수 있고 GetComponent라는 메서드를 통해 직접 다른 Component를 참조해서 사용할 수 있다.

### Game Engine Unreal
---


### Web FrontEnd Framework React
---
