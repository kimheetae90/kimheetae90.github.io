---
title: "평균 구하는 방법! 산술평균, 기하평균, 조화평균"
layout: post
date: 2019-03-11 14:08
image: /assets/images/markdown.jpg
headerImage: false
tag:
- Average
category: blog
author: heetaekim
description: 평균을 구하는 방법들을 알아보자
---

# 개요
---
작업을 하다가 게임의 평균 FPS가 필요하게 되었다. 처음엔 학생시절에 배웠던 방법((x1 + x2 + ... + xn) / n)만 생각하고 계산을 해봤는데 값이 정확한 것 같지 않아서 평균을 구하는 법에 대해 알아봤다. 평균을 구하는 방법에는 다른 방법들도 있는 것을 알게 되었고 용도에 맞게 잘 사용해야하는 것도 알게 되었다.

&nbsp;&nbsp;&nbsp;&nbsp;
# 산술평균
---
### 공식
주어진 모든 수의 합을 모든 수의 갯수로 나눈 값이다.

![산술 평균](/assets/images/post/2019-07-21-average/2019-07-21-ArithmeticMean.PNG)


### 용도
일반적으로 많이 사용하고 여러 값들이 어느 값에 치우쳐져있는지 계산하기 위해 사용한다. 단점으로는 평균에서 먼 값(매우 작거나 큰 값)이 평균에 큰 영향을 미친다.

### 예시
학생들의 점수가 70, 90, 80, 85 점 일 때에 평균은 (70 + 90 + 80 + 85) / 4 = 81.25 이다.

&nbsp;&nbsp;&nbsp;&nbsp;
# 기하평균
---
### 공식
주어진 모든 수의 양수 값을 곱한 것의 N제곱근이다.(N은 수의 갯수)

![기하 평균](/assets/images/post/2019-07-21-average/2019-07-21-GeometricMean.PNG)


### 용도
곱셈으로 계산하는 값의 평균을 구할 때 사용! 비율을 나타내는 값이나 곱셈으로 증감하는 값 들의 평균을 구할 때 사용된다. 


### 예시
매출이 1000억이고 3년동안 +10%, +20%, -15%의 변화가 있었을 때 평균은 (1.1 * 1.2 * 0.85)^1/3 = 1.0391.. 이 된다. 3년 후 매출은 1000 * 1.0391^3 이다.


&nbsp;&nbsp;&nbsp;&nbsp;
# 조화평균
---
### 공식
주어진 모든 수의 역수의 산술평균의 역수이다.
![조화 평균](/assets/images/post/2019-07-21-average/2019-07-21-HarmonicMean.PNG)

### 용도
주로 평균진동수, 평균속도 등 분모를 시간으로 갖는 값의 평균을 구할 때 사용한다. 사용하는 경우가 많지 않지만 극단적인 값에 영향을 많이 받지 않고 좀더 정확한 평균값을 구해준다. 조화로운 음을 찾는다 하여 조화평균이라 하는데 현악기에서 현의 길이에 따라 맞는 음을 찾을 때 사용되어서 붙여진 이름이라 한다.

### 예시
갈 때 40km/h, 올 떄 60km/h로 달렸을 때 평균은 2 / (1/40 + 1/60) = 48km/h 이다

&nbsp;&nbsp;&nbsp;&nbsp;
# 평균 FPS 구하기
FPS는 시간당 Framerate이기때문에 조화평균이 적절해보인다. 따라서 조화평균을 사용해서 평균 FPS를 구해보고 렌더링이 적은 부분과 렌더링이 많은 부분을 만들어서 테스트해봤다.

![Level 수정](/assets/images/post/2019-07-21-average/2019-07-21-LevelScriptActor.PNG)

먼저 Tick을 돌면서 계산해야하기 때문에 코드를 수정할 LevelScriptActor를 만들고 내가 만든 LevelScriptActor가 세팅되게 수정했다.

### Code

##### MyLevelScriptActor.h
```
TArray<float> FrameArray;

int32 CurrentIndex = 0;

void AddToArray(float inFramerate);

int32 ComputeAverage();
```

##### MyLevelScriptActor.cpp
```
void AMyLevelScriptActor::AddToArray(float inFramerate)
{
	if (++CurrentIndex >= FrameArray.Num())
	{
		CurrentIndex = 0;
	}

	FrameArray[CurrentIndex] = inFramerate;
}

int32 AMyLevelScriptActor::ComputeAverage()
{
	float sum = 0;

	int32 count = FrameArray.Num();
	for (int32 iter = 0; iter < count; iter++)
	{
		sum += 1 / FrameArray[iter];
	}

	float avg = (float)count / sum;

	return (int32)FMath::RoundHalfToZero(avg);
}
```

### 결과
![결과](/assets/images/post/2019-07-21-average/2019-07-21-Result.gif)

&nbsp;&nbsp;&nbsp;&nbsp;
# 마무리
---
세 가지 방법만 공유했지만 산술기하평균, 산술기하조화평균 등 다른 방법도 있는 것 같다. 그리고 학생 때 배웠겠지만 산술평균과 기하평균과의 관계도 존재한다. 이 포스트에서는 다루지 않겠다. 위와 같은 방식으로 평균 fps를 구했다면 Lazy Initiallize, Asnyc Loading, Graphic Quailty 최적화 등에 활용할 수 있을 것이다.
---
